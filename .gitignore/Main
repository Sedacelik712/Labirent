
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define TRUE 1
#define FALSE 0
int n;

struct YiginDugum
{
int veri;
int x;
int y;
struct YiginDugum* sonraki;
}*top1;
struct YiginDugum* kok=NULL;
struct YiginDugum* peek(){
    if(kok==NULL){
        return 0;
    }
    else
        return kok;
};
struct YiginDugum matrix[100][100];
void yazdir(){
    int i,j;
    for(i=0;i<=n;i++){
        for(j=0;j<=n;j++)
            matrix[i][j].veri=0;
    }
    struct YiginDugum *q;
    q=kok;
    while(q!=NULL){
        printf("matris[%d][%d]\n",q->x,q->y);
        matrix[q->x][q->y].veri=1;
        q=q->sonraki;
    }
   for(i=0;i<=n;i++){
        for(j=0;j<=n;j++)
            printf("%d ",matrix[i][j].veri);
            printf("\n");
    }
}
struct YiginDugum* YeniDugum(struct YiginDugum item)
{

struct YiginDugum* yigindugum = (struct YiginDugum*) malloc(sizeof(struct YiginDugum));
yigindugum->x =item.x;
yigindugum->y =item.y;
yigindugum->sonraki = NULL;
return yigindugum;
}


void ekle(struct YiginDugum item)
{
struct YiginDugum* yigindugum = YeniDugum(item);
yigindugum->sonraki = kok;
kok = yigindugum;
printf("%d %d verisine sahip dugum eklendi\n",item.x,item.y);
}
int bosmu(struct YiginDugum *kok)
{
return !kok;
}
int al()
{
if (bosmu(kok))
return 0;
struct YiginDugum* alinacak = kok;
kok = kok->sonraki;
printf("%d %d verisi dugumden alindi\n",alinacak->x,alinacak->y);
free(alinacak);

return 0;
}


void matris(){
int i,j,temp;
printf("boyut:");
scanf("%d",&n);
srand((unsigned)time(NULL));
for(i=1;i<n;i++)
for(j=1;j<n;j++){
    temp=rand()%100+1;
    if(temp>30){
        matrix[i][j].veri=1;
    }
    else{
        matrix[i][j].veri=0;
    }
}

for(i=0;i<=n;i++){
    matrix[0][i].veri=i;
    matrix[n][i].veri=i;
}
for(j=1;j<=n;j++){
    matrix[j][0].veri=j;
    matrix[j][n].veri=j;
}
for(i=0;i<=n;i++){
    for(j=0;j<=n;j++)
        printf("%2d  ",matrix[i][j].veri);
    printf("\n");
}
}
int labirent(){
int g1,g2,c1,c2;
int bulundu=0;
int i,j;
do{
printf("Labirentin girisi nedir? ");
scanf("%d %d",&g1,&g2);
printf("Labirentin cikisi nedir? ");
scanf("%d %d",&c1,&c2);
}
while(matrix[g1][g2].veri!=1 && matrix[c1][c2].veri!=1);
struct YiginDugum item;
i=g1;
j=g2;
item.x=g1;
item.y=g2;
while(1){
    if(matrix[i][j].veri==1){
            if(matrix[i][j+1].veri==1){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                j++;

            }
            else if(matrix[i+1][j].veri==1){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                i++;

            }
            else if(matrix[i][j-1].veri==1){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                j--;
            }
             else if( matrix[i-1][j].veri==1 ){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                i--;

            }
            else{
                matrix[i][j].veri=0;

                ekle(item);
            }
        }
        else{
           if(matrix[i][j+1].veri==1){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                j++;

            }
        else if( matrix[i+1][j].veri==1){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                i++;

            }
             else if(matrix[i][j-1].veri==1 ){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                j--;

            }
             else if( matrix[i-1][j].veri==1 ){
                item.x=i;
                item.y=j;
                ekle(item);
                matrix[i][j].veri=-1;
                i--;

            }

            else{
                al();
                peek();
                item.x=kok->x;
                item.y=kok->y;
                i=item.x;
                j=item.y;
                al();
            }
        }
        if(i==c1 && j==c2){
                matrix[c1][c2].veri=-1;
                bulundu=1;
                item.x=c1;
                item.y=c2;
                ekle(item);


         break;

        }

continue;
}
if(bulundu==1){
printf("\n--------izlenen yol------\n");
yazdir();
}
else
    printf("cikis yolu yok!\n");


return 0;
}
int main(){
matris();
labirent();

return 0;
}
